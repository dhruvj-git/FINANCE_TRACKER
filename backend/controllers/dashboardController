// controllers/dashboardController.js (Complete, Corrected File)

const pool = require('../db/db');

// ✅ This is the function definition.
const getDashboardSummary = async (req, res) => {
  const userId = req.user.user_id;

  try {
    // Query 1: Calculate total income and expense for the current month
    const monthlySummaryQuery = `
      SELECT
        COALESCE(SUM(CASE WHEN c.category_type = 'Income' THEN t.amount ELSE 0 END), 0) AS "monthly_income",
        COALESCE(SUM(CASE WHEN c.category_type = 'Expense' THEN t.amount ELSE 0 END), 0) AS "monthly_expense"
      FROM transaction t
      JOIN category c ON t.category_id = c.category_id
      WHERE t.user_id = $1 AND date_trunc('month', t.transaction_date) = date_trunc('month', CURRENT_DATE)
    `;
    const monthlySummaryResult = await pool.query(monthlySummaryQuery, [userId]);
    const { monthly_income, monthly_expense } = monthlySummaryResult.rows[0];


    // Query 2: Calculate total balance (all-time income - all-time expense)
    const totalBalanceQuery = `
      SELECT
        COALESCE(SUM(CASE WHEN c.category_type = 'Income' THEN t.amount ELSE 0 END), 0) - 
        COALESCE(SUM(CASE WHEN c.category_type = 'Expense' THEN t.amount ELSE 0 END), 0) AS "total_balance"
      FROM transaction t
      JOIN category c ON t.category_id = c.category_id
      WHERE t.user_id = $1
    `;
    const totalBalanceResult = await pool.query(totalBalanceQuery, [userId]);
    const { total_balance } = totalBalanceResult.rows[0];


    // Query 3: Count total number of transactions
    const transactionCountQuery = `
      SELECT COUNT(*) AS "total_transactions"
      FROM transaction
      WHERE user_id = $1
    `;
    const transactionCountResult = await pool.query(transactionCountQuery, [userId]);
    const { total_transactions } = transactionCountResult.rows[0];

    // Send a clean, flat JSON object back to the frontend
    res.json({
      total_balance: parseFloat(total_balance).toFixed(2),
      monthly_expense: parseFloat(monthly_expense).toFixed(2),
      total_transactions: parseInt(total_transactions, 10)
    });

  } catch (err) {
    console.error('❌ Error fetching dashboard data:', err.stack);
    res.status(500).json({ message: 'Error fetching dashboard data' });
  }
};

// ✅ FIX: This is the correct way to export the function.
// The error was caused by a typo on this line.
module.exports = {
  getDashboardSummary
};